generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model medical_appointment {
  id                 Int      @default(autoincrement())
  student_id         Int
  psycho_id          Int
  date_request       DateTime @db.DateTime(0)
  date_appointment   DateTime @db.DateTime(0)
  status_appointment String   @db.VarChar(20)
  psycho_diagnosis   String?  @db.VarChar(200)
  student_rating     Int?     @default(0)
  psycho_treatment   String?  @db.VarChar(100)
  created_at         DateTime @default(now()) @db.DateTime(0)
  updated_at         DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model psychology {
  id                  Int      @default(autoincrement())
  nickname            String   @db.VarChar(20)
  name                String   @db.VarChar(100)
  password            String   @db.VarChar(100)
  email               String   @db.VarChar(100)
  phone               String   @db.VarChar(15)
  city                String   @db.VarChar(25)
  code_psychology     String   @db.VarChar(7)
  office              String?  @db.VarChar(100)
  active              Boolean? @default(true)
  rating_average      Float?   @default(0) @db.Float
  appointments_number Int?     @default(0)
  created_at          DateTime @default(now()) @db.DateTime(0)
  updated_at          DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model student {
  id               Int      @default(autoincrement())
  nickname         String   @db.VarChar(20)
  name             String   @db.VarChar(100)
  password         String   @db.VarChar(100)
  email            String   @db.VarChar(100)
  phone            String   @db.VarChar(15)
  city             String   @db.VarChar(25)
  code_student     String   @db.VarChar(7)
  academic_program Int
  semester         Int
  created_at       DateTime @default(now()) @db.DateTime(0)
  updated_at       DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model superuser {
  id         Int      @default(autoincrement())
  nickname   String   @db.VarChar(30)
  password   String   @db.VarChar(100)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model workshop {
  id         Int      @default(autoincrement())
  title      String   @db.VarChar(30)
  image      String   @db.VarChar(200)
  body       String   @db.VarChar(500)
  url        String?  @db.VarChar(200)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model frequent_questions {
  id          Int      @default(autoincrement())
  question    String   @db.VarChar(100)
  answer      String?  @db.VarChar(500)
  asked_by    String   @db.VarChar(50)
  answered_by String?  @db.VarChar(50)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model video {
  id          Int      @default(autoincrement())
  description String   @db.VarChar(100)
  url         String   @db.VarChar(200)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @default(now()) @db.DateTime(0)

  @@ignore
}
